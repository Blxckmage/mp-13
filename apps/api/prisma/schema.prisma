generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id      Int           @id @default(autoincrement())
  password     String
  email        String        @unique
  full_name    String
  role         Role
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  events       Event[]       @relation("EventCreatedBy")
  ratings      Rating[]
  referrals    Referral[]    @relation("ReferralUser")
  transactions Transaction[]
  points       Points[]      @relation("UserPoints")
  ticket       Ticket[]
}

model Referral {
  referral_id   Int      @id @default(autoincrement())
  referrer_id   Int
  referral_code String   @unique
  created_at    DateTime @default(now())
  expires_at    DateTime
  user          User     @relation("ReferralUser", fields: [referrer_id], references: [user_id])
  points        Points[] @relation("ReferralPoints")

  @@index([referrer_id])
}

model Points {
  points_id   Int      @id @default(autoincrement())
  referral_id Int
  user_id     Int
  points      Int
  created_at  DateTime @default(now())
  expires_at  DateTime
  user        User     @relation("UserPoints", fields: [user_id], references: [user_id])
  referral    Referral @relation("ReferralPoints", fields: [referral_id], references: [referral_id])

  @@index([user_id])
  @@index([referral_id])
}

model Event {
  event_id          Int           @id @default(autoincrement())
  event_name        String
  event_description String
  start_date        DateTime
  end_date          DateTime
  event_category    String
  event_location    String
  available_seats   Int
  total_seats       Int
  ticket_limit      Int
  ticket_price      Int
  created_by        Int
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  creator           User          @relation("EventCreatedBy", fields: [created_by], references: [user_id])
  promotions        Promotion[]
  ratings           Rating[]
  tickets           Ticket[]
  Transaction       Transaction[]

  @@index([created_by])
}

model Ticket {
  ticket_id  Int      @id @default(autoincrement())
  user_id    Int
  event_id   Int
  price      Float
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  event      Event    @relation(fields: [event_id], references: [event_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([event_id])
  @@index([user_id])
}

model Rating {
  rating_id  Int      @id @default(autoincrement())
  event_id   Int
  user_id    Int
  rating     Int
  comment    String
  created_at DateTime @default(now())
  event      Event    @relation(fields: [event_id], references: [event_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([event_id])
  @@index([user_id])
}

model Promotion {
  promotion_id        Int      @id @default(autoincrement())
  event_id            Int
  discount_percentage Float
  valid_from          DateTime
  valid_until         DateTime
  max_uses            Int
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  event               Event    @relation(fields: [event_id], references: [event_id])

  @@index([event_id])
}

model Transaction {
  transaction_id     Int               @id @default(autoincrement())
  user_id            Int
  event_id           Int
  event_name         String
  transaction_date   DateTime          @default(now())
  quantity           Int
  total_amount       Float
  transaction_status TransactionStatus
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  user               User              @relation(fields: [user_id], references: [user_id])
  event              Event             @relation(fields: [event_id], references: [event_id])

  @@index([user_id])
  @@index([event_id])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Role {
  participant
  organizer
}
